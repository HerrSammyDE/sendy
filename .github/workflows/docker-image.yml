name: CI

on:
  workflow_dispatch:
  push:
    branches:
      - '*'
env:
  IMAGE_NAME: sendy
  ORG_NAME: HerrSammyDE

jobs:
  auth-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
      - uses: actions/checkout@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: $ORG_NAME
          password: ${{ secrets.DOCKER_REGISTRY_TOKEN }}
  push:
    needs: auth-test

    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
      - uses: actions/checkout@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: $ORG_NAME
          password: ${{ secrets.DOCKER_REGISTRY_TOKEN }}

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: /tmp/composer-cache
          key: ${{ runner.os }}-${{ hashFiles('**/composer.lock') }}abc

      - name: Install composer dependencies
        uses: php-actions/composer@v6
        with:
          php_version: "8.2"
          args: --profile --ignore-platform-reqs --optimize-autoloader
          dev: no

      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install node dependencies
        run: |
          npm install --no-audit --prefer-offline --no-fund --no-optional --force
          npm run production
      - name: Build image
        run: docker build . --file docker/app/Dockerfile --tag $IMAGE_NAME

      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/$ORG_NAME/$IMAGE_NAME
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          COMMIT=$(echo "${{ github.sha }}")
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          [ "$VERSION" == "main" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$COMMIT
          docker push $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$COMMIT